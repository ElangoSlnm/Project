{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { memo, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuid } from 'uuid';\nimport { attempt } from 'lodash-es';\nimport SeriesContext from '../SeriesContext';\nimport { getNonEventHandlerProps, getEventsConfig } from '../../utils/events';\nimport getModifiedProps from '../../utils/getModifiedProps';\nimport { logSeriesErrorMessage } from '../../utils/warnings';\nimport usePrevious from '../UsePrevious';\nimport useHighcharts from '../UseHighcharts';\nimport useChart from '../UseChart';\nimport useAxis from '../UseAxis';\nimport useColorAxis from '../UseColorAxis';\nimport createProvidedSeries from './createProvidedSeries';\nvar EMPTY_ARRAY = [];\nvar Series = /*#__PURE__*/memo(function (_ref) {\n  var _ref$id = _ref.id,\n      id = _ref$id === void 0 ? uuid : _ref$id,\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? EMPTY_ARRAY : _ref$data,\n      _ref$isDataEqual = _ref.isDataEqual,\n      isDataEqual = _ref$isDataEqual === void 0 ? Object.is : _ref$isDataEqual,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'line' : _ref$type,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      axisId = _ref.axisId,\n      _ref$requiresAxis = _ref.requiresAxis,\n      requiresAxis = _ref$requiresAxis === void 0 ? true : _ref$requiresAxis,\n      jsxOptions = _ref.jsxOptions,\n      restProps = _objectWithoutProperties(_ref, [\"id\", \"data\", \"isDataEqual\", \"type\", \"visible\", \"children\", \"axisId\", \"requiresAxis\", \"jsxOptions\"]);\n\n  var seriesProps = _objectSpread({\n    id: id,\n    data: data,\n    type: type,\n    visible: visible\n  }, restProps);\n  /*\n    if (defaultTo(restProps.requiresAxis, true)) {\n      const axis = getAxis();\n      if(!axis) throw new Error(`Series type=\"${restProps.type}\" should be wrapped inside Axis`);\n    }\n  */\n\n\n  var Highcharts = useHighcharts();\n\n  var _useChart = useChart(),\n      addSeries = _useChart.addSeries,\n      needsRedraw = _useChart.needsRedraw;\n\n  if (process.env.NODE_ENV === 'development') {\n    var seriesTypes = Object.keys(Highcharts.seriesTypes);\n    if (seriesTypes.indexOf(type) === -1) logSeriesErrorMessage(type);\n  }\n\n  var seriesRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      setHasSeries = _useState2[1];\n\n  var providerValueRef = useRef(null);\n  var axis = useAxis(axisId);\n  var colorAxis = useColorAxis();\n  useEffect(function () {\n    if (requiresAxis && !axis) return;\n    var opts = getSeriesConfig(seriesProps, axis, colorAxis, requiresAxis);\n    seriesRef.current = addSeries(opts, false);\n    providerValueRef.current = createProvidedSeries(seriesRef.current);\n    setHasSeries(true);\n    needsRedraw();\n    return function () {\n      var series = seriesRef.current;\n\n      if (series && series.remove) {\n        // Series may have already been removed, i.e. when Axis unmounted\n        attempt(series.remove.bind(series), false);\n        seriesRef.current = null;\n        needsRedraw();\n      }\n    };\n  }, [axis]);\n  var prevProps = usePrevious(seriesProps);\n  useEffect(function () {\n    if (!prevProps || !seriesRef.current) return;\n    var series = seriesRef.current;\n\n    var visible = seriesProps.visible,\n        data = seriesProps.data,\n        rest = _objectWithoutProperties(seriesProps, [\"visible\", \"data\"]);\n\n    var doRedraw = false; // Using setData is more performant than update\n\n    if (isDataEqual(data, prevProps.data) === false) {\n      var animation = jsxOptions && jsxOptions.animation;\n      var updatePoints = jsxOptions && jsxOptions.updatePoints;\n      series.setData(data, false, animation, updatePoints);\n      doRedraw = true;\n    }\n\n    if (visible !== prevProps.visible) {\n      series.setVisible(visible, false);\n      doRedraw = true;\n    }\n\n    var modifiedProps = getModifiedProps(prevProps, rest);\n\n    if (modifiedProps !== false) {\n      series.update(modifiedProps, false);\n      doRedraw = true;\n    }\n\n    if (doRedraw) {\n      needsRedraw();\n    }\n  });\n  if (!seriesRef.current) return null;\n  return /*#__PURE__*/React.createElement(SeriesContext.Provider, {\n    value: providerValueRef.current\n  }, children);\n});\nSeries.displayName = 'Series';\n\nvar getSeriesConfig = function getSeriesConfig(props, axis, colorAxis, requiresAxis) {\n  var id = props.id,\n      data = props.data,\n      rest = _objectWithoutProperties(props, [\"id\", \"data\"]);\n\n  var seriesId = typeof id === 'function' ? id() : id;\n  var nonEventProps = getNonEventHandlerProps(rest);\n  var events = getEventsConfig(rest);\n\n  var config = _objectSpread({\n    id: seriesId,\n    data: data,\n    events: events\n  }, nonEventProps);\n\n  if (colorAxis) {\n    config.colorAxis = colorAxis.id;\n  }\n\n  if (requiresAxis) {\n    config[axis.type] = axis.id;\n  }\n\n  return config;\n};\n\nexport default Series;","map":{"version":3,"sources":["/home/elangosellappan/old/Projects/embedding_session/ui/node_modules/react-jsx-highcharts/dist/es/components/Series/Series.js"],"names":["_slicedToArray","_objectSpread","_objectWithoutProperties","React","memo","useRef","useState","useEffect","PropTypes","v4","uuid","attempt","SeriesContext","getNonEventHandlerProps","getEventsConfig","getModifiedProps","logSeriesErrorMessage","usePrevious","useHighcharts","useChart","useAxis","useColorAxis","createProvidedSeries","EMPTY_ARRAY","Series","_ref","_ref$id","id","_ref$data","data","_ref$isDataEqual","isDataEqual","Object","is","_ref$type","type","_ref$visible","visible","_ref$children","children","axisId","_ref$requiresAxis","requiresAxis","jsxOptions","restProps","seriesProps","Highcharts","_useChart","addSeries","needsRedraw","process","env","NODE_ENV","seriesTypes","keys","indexOf","seriesRef","_useState","_useState2","setHasSeries","providerValueRef","axis","colorAxis","opts","getSeriesConfig","current","series","remove","bind","prevProps","rest","doRedraw","animation","updatePoints","setData","setVisible","modifiedProps","update","createElement","Provider","value","displayName","props","seriesId","nonEventProps","events","config"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { memo, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuid } from 'uuid';\nimport { attempt } from 'lodash-es';\nimport SeriesContext from '../SeriesContext';\nimport { getNonEventHandlerProps, getEventsConfig } from '../../utils/events';\nimport getModifiedProps from '../../utils/getModifiedProps';\nimport { logSeriesErrorMessage } from '../../utils/warnings';\nimport usePrevious from '../UsePrevious';\nimport useHighcharts from '../UseHighcharts';\nimport useChart from '../UseChart';\nimport useAxis from '../UseAxis';\nimport useColorAxis from '../UseColorAxis';\nimport createProvidedSeries from './createProvidedSeries';\nvar EMPTY_ARRAY = [];\nvar Series = /*#__PURE__*/memo(function (_ref) {\n  var _ref$id = _ref.id,\n      id = _ref$id === void 0 ? uuid : _ref$id,\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? EMPTY_ARRAY : _ref$data,\n      _ref$isDataEqual = _ref.isDataEqual,\n      isDataEqual = _ref$isDataEqual === void 0 ? Object.is : _ref$isDataEqual,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'line' : _ref$type,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      axisId = _ref.axisId,\n      _ref$requiresAxis = _ref.requiresAxis,\n      requiresAxis = _ref$requiresAxis === void 0 ? true : _ref$requiresAxis,\n      jsxOptions = _ref.jsxOptions,\n      restProps = _objectWithoutProperties(_ref, [\"id\", \"data\", \"isDataEqual\", \"type\", \"visible\", \"children\", \"axisId\", \"requiresAxis\", \"jsxOptions\"]);\n\n  var seriesProps = _objectSpread({\n    id: id,\n    data: data,\n    type: type,\n    visible: visible\n  }, restProps);\n  /*\n    if (defaultTo(restProps.requiresAxis, true)) {\n      const axis = getAxis();\n      if(!axis) throw new Error(`Series type=\"${restProps.type}\" should be wrapped inside Axis`);\n    }\n  */\n\n\n  var Highcharts = useHighcharts();\n\n  var _useChart = useChart(),\n      addSeries = _useChart.addSeries,\n      needsRedraw = _useChart.needsRedraw;\n\n  if (process.env.NODE_ENV === 'development') {\n    var seriesTypes = Object.keys(Highcharts.seriesTypes);\n    if (seriesTypes.indexOf(type) === -1) logSeriesErrorMessage(type);\n  }\n\n  var seriesRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      setHasSeries = _useState2[1];\n\n  var providerValueRef = useRef(null);\n  var axis = useAxis(axisId);\n  var colorAxis = useColorAxis();\n  useEffect(function () {\n    if (requiresAxis && !axis) return;\n    var opts = getSeriesConfig(seriesProps, axis, colorAxis, requiresAxis);\n    seriesRef.current = addSeries(opts, false);\n    providerValueRef.current = createProvidedSeries(seriesRef.current);\n    setHasSeries(true);\n    needsRedraw();\n    return function () {\n      var series = seriesRef.current;\n\n      if (series && series.remove) {\n        // Series may have already been removed, i.e. when Axis unmounted\n        attempt(series.remove.bind(series), false);\n        seriesRef.current = null;\n        needsRedraw();\n      }\n    };\n  }, [axis]);\n  var prevProps = usePrevious(seriesProps);\n  useEffect(function () {\n    if (!prevProps || !seriesRef.current) return;\n    var series = seriesRef.current;\n\n    var visible = seriesProps.visible,\n        data = seriesProps.data,\n        rest = _objectWithoutProperties(seriesProps, [\"visible\", \"data\"]);\n\n    var doRedraw = false; // Using setData is more performant than update\n\n    if (isDataEqual(data, prevProps.data) === false) {\n      var animation = jsxOptions && jsxOptions.animation;\n      var updatePoints = jsxOptions && jsxOptions.updatePoints;\n      series.setData(data, false, animation, updatePoints);\n      doRedraw = true;\n    }\n\n    if (visible !== prevProps.visible) {\n      series.setVisible(visible, false);\n      doRedraw = true;\n    }\n\n    var modifiedProps = getModifiedProps(prevProps, rest);\n\n    if (modifiedProps !== false) {\n      series.update(modifiedProps, false);\n      doRedraw = true;\n    }\n\n    if (doRedraw) {\n      needsRedraw();\n    }\n  });\n  if (!seriesRef.current) return null;\n  return /*#__PURE__*/React.createElement(SeriesContext.Provider, {\n    value: providerValueRef.current\n  }, children);\n});\nSeries.displayName = 'Series';\n\nvar getSeriesConfig = function getSeriesConfig(props, axis, colorAxis, requiresAxis) {\n  var id = props.id,\n      data = props.data,\n      rest = _objectWithoutProperties(props, [\"id\", \"data\"]);\n\n  var seriesId = typeof id === 'function' ? id() : id;\n  var nonEventProps = getNonEventHandlerProps(rest);\n  var events = getEventsConfig(rest);\n\n  var config = _objectSpread({\n    id: seriesId,\n    data: data,\n    events: events\n  }, nonEventProps);\n\n  if (colorAxis) {\n    config.colorAxis = colorAxis.id;\n  }\n\n  if (requiresAxis) {\n    config[axis.type] = axis.id;\n  }\n\n  return config;\n};\n\nexport default Series;"]},"metadata":{},"sourceType":"module"}